package pe.edu.upc.spring.controller;

import java.text.ParseException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import pe.edu.upc.spring.model.Categoria;
import pe.edu.upc.spring.model.Juegos;
import pe.edu.upc.spring.model.Pago;
import pe.edu.upc.spring.service.IJuegosService;
import pe.edu.upc.spring.service.IPagoService;
import pe.edu.upc.spring.service.ITipodePagoService;

@Controller
@RequestMapping("/pago")
public class PagoController {

	@Autowired
	private IPagoService pService;
	@Autowired
	private ITipodePagoService tService;
	@Autowired
	private IJuegosService mService;

	@RequestMapping("/")
	public String irPago(Map<String, Object> model) {
		model.put("listaPagos", pService.listar());
		return "listaPago";
	}

	@RequestMapping("/irRegistrar")
	public String irRegistrar(Model model) {
		model.addAttribute("listaJuegos", mService.listar());
		model.addAttribute("juegos", new Juegos());
		model.addAttribute("listaTPagos", tService.listar());
		model.addAttribute("tipopago", new Categoria());
		model.addAttribute("pago", new Pago());
		return "pago";
	}

	@RequestMapping("/registrar")
	public String registrar(@ModelAttribute @Valid Pago objPago, BindingResult binRes, Model model)
			throws ParseException {
		if (binRes.hasErrors()) {
			return "pago";
		} else {
			int rpta = pService.insertar(objPago);
			if (rpta > 0) {
				model.addAttribute("mensaje", "Se resgistrado correctamente");
				return "redirect:/pago/listar";
			} else {
				model.addAttribute("mensaje", "Ocurrio un error");
				return "redirect:/pago/irRegistrar";
			}
		}
	}

	@RequestMapping("/modificar/{id}")
	public String modificar(@PathVariable int id, Model model, RedirectAttributes objRedir) throws ParseException {
		Optional<Pago> objpago = pService.listarId(id);

		if (objpago == null) {
			objRedir.addFlashAttribute("mensaje", "Ocurrio un error");
			return "redirect:/pago/listar";
		} else {
			model.addAttribute("listaTPagos", tService.listar());
			if (objpago.isPresent())
				objpago.ifPresent(o -> model.addAttribute("pago", o));

			return "pago";
		}
	}

	@RequestMapping("/eliminar")
	public String eliminar(Map<String, Object> model, @RequestParam(value = "id") Integer id) {
		try {
			if (id != null && id > 0) {
				pService.eliminar(id);
				model.put("listaPagos", pService.listar());
			}
		} catch (Exception ex) {
			System.out.println(ex.getMessage());
			model.put("mensaje", "sucedio un error");
			model.put("listaPagos", pService.listar());
		}
		return "listaPago";
	}

	@RequestMapping("/listar")
	public String listar(Map<String, Object> model) {
		model.put("listaPagos", pService.listar());
		return "listaPago";
	}

	@RequestMapping("/listarId")
	public String listar(Map<String, Object> model, @ModelAttribute Pago pago) throws ParseException {
		pService.listarId(pago.getIdPago());
		return "listaPago";
	}

	/*
	 * @RequestMapping("/buscar") public String buscar(Map<String, Object>
	 * model, @ModelAttribute Pago pago ) throws ParseException { List<Pago>
	 * listaPagos; pago.setIdPago(pago.getIdPago()); listaPagos =
	 * pService.buscarIdPago(pago.getIdPago());
	 * 
	 * if (listaPagos.isEmpty()) { model.put("mensaje", "No se encontro"); }
	 * model.put("listaPagos", listaPagos); return "buscar"; }
	 */
	@PostMapping("/buscar")
	public String buscar2(@RequestParam(value = "txtnamesearch") String txtnamesearch, Model model) {
		List<Pago> listaPagos;
		if (StringUtils.isEmpty(txtnamesearch)) {
			listaPagos = pService.listar();
		} else {
			listaPagos = pService.buscarIdPago(txtnamesearch);
		}

		if (listaPagos.isEmpty()) {
			model.addAttribute("mensaje", "No se encontraron resultados");
		}
		model.addAttribute("listaPagos", listaPagos);
		return "listaPago";
	}

	@RequestMapping("/irBuscar")
	public String irBuscar(Model model) {
		model.addAttribute("pago", new Pago());
		return "buscar";
	}

}
