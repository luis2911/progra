package pe.edu.upc.spring.controller;

import java.text.ParseException;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import pe.edu.upc.spring.model.Articulo;
import pe.edu.upc.spring.service.IArticuloService;

@Controller
@RequestMapping("/articulo")
public class ArticuloController {

	
	@Autowired
	private IArticuloService mService;
	@RequestMapping("/bienvenido")
	public String irArticuloBienvenido() {
		return "bienvenido";
	}
	
	@RequestMapping("/")
	public String irArituclo(Map<String, Object> model) {
		model.put("listaArticulos", mService.listar());
		return "listArticulo";
	}
	
	@RequestMapping("/irRegistrar")
	public String irRegistrar(Model model) {
		model.addAttribute("articulo", new Articulo());
		return "articulo";
	}
	@RequestMapping("/registrar")
	public String registrar(@ModelAttribute @Valid Articulo objArt, BindingResult binRes, Model model) 
	throws ParseException
	{
		if (binRes.hasErrors()) {
			return "race";
		}
		else {
			boolean flag = mService.insertar(objArt);
			if (flag) {
				return "redirect:/articulo/listar";
			}
			else {
				model.addAttribute("mensaje", "Ocurrio un error");
				return "redirect:/articulo/irRegistrar";
			}
		}
	}
	
	@RequestMapping("/modificar/{id}")
	public String modificar(@PathVariable int id, Model model, RedirectAttributes objRedir) 
	throws ParseException
	{
		Optional<Articulo> objArt = mService.listarId(id);
		
		if (objArt == null) {
			objRedir.addFlashAttribute("mensaje", "Ocurrio un error");
			return "redirect:/articulo/listar";
		}
		else {
			model.addAttribute("articulo", objArt);
			return "articulo";
		}
	}
	@RequestMapping("/eliminar")
	public String eliminar(Map<String, Object> model, @RequestParam(value="id") Integer id) 
	{
		try {
			if (id!=null && id > 0) {
				mService.eliminar(id);
				model.put("listaArticulos", mService.listar());
			}
		}
		catch(Exception ex) {
			System.out.println(ex.getMessage());
			model.put("mensaje", "sucedio un error");
			model.put("listaArticulos", mService.listar());
		}
		return "listArticulo";
	}
	
	
	@RequestMapping("/listar")
	public String listar(Map<String, Object> model) {
		model.put("listaArticulos", mService.listar());
		return "listaArticulo";
	}
	
	@RequestMapping("/listarId")
	public String listar(Map<String, Object> model, @ModelAttribute Articulo articulo) 
	throws ParseException
	{
		mService.listarId(articulo.getIdArticulo());
		return "listArticulo";
	}	
	
	@RequestMapping("/buscar")
	public String buscar(Map<String, Object> model, @ModelAttribute Articulo articulo ) throws ParseException {
		List<Articulo> listaArticulos;
		articulo.setNombreArticulo(articulo.getNombreArticulo());
		listaArticulos = mService.buscarNombre(articulo.getNombreArticulo());
		
		if (listaArticulos.isEmpty()) {
			model.put("mensaje", "No se encontro");
		}
		model.put("listaArticulos", listaArticulos);				
		return "buscar";
	}
	
	@RequestMapping("/irBuscar")
	public String irBuscar(Model model) {
		model.addAttribute("articulo", new Articulo());
		return "buscar";
	}
}
